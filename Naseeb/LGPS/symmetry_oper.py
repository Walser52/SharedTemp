# -*- coding: utf-8 -*-
"""symmetry_oper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C3Xuhwp7tqDXTVOq4O40TSXwsDXY7vXB
"""

import numpy as np

# === 1. Define symmetry operations ===
sym_ops = [
    'x, y, z',
    '-x, -y, z',
    'x, -y, -z',
    '-x, y, -z',
    '-x+1/2, -y, -z+1/2',
    'x+1/2, y, -z+1/2',
    '-x+1/2, y, z+1/2',
    'x+1/2, -y, z+1/2',
    'x+1/2, y+1/2, z',
    '-x+1/2, -y+1/2, z',
    'x+1/2, -y+1/2, -z',
    '-x+1/2, y+1/2, -z',
    '-x, -y+1/2, -z+1/2',
    'x, y+1/2, -z+1/2',
    '-x, y+1/2, z+1/2',
    'x, -y+1/2, z+1/2'
]

def apply_sym_op(op_str, coord):
    """Apply one symmetry operation string to a coordinate (fractional)."""
    x, y, z = coord
    expr = op_str.replace('x', f'({x})').replace('y', f'({y})').replace('z', f'({z})')
    return np.array([eval(e) % 1.0 for e in expr.split(',')])

def apply_all_sym_ops(coord):
    """Apply all symmetry operations to one coordinate."""
    return [apply_sym_op(op, coord) for op in sym_ops]

def fractional_equal(a, b, tol=1e-5):
    """Check if two fractional coords are equal modulo periodicity."""
    diff = np.abs(a - b)
    diff = np.minimum(diff, 1 - diff)  # account for wrapping
    return np.all(diff < tol)

def unique_positions(coords, tol=1e-5):
    """Filter symmetry-duplicate positions."""
    unique = []
    for c in coords:
        if not any(fractional_equal(c, u, tol) for u in unique):
            unique.append(c)
    return unique

# === 2. Your atomic data ===
atoms_data = [
    ("Li", [0.00258825, 0.19367075, 0.29314572]),
    ("Li", [0.12126512, 0.00344482, 0.75615412]),
    ("Li", [0.15830514, 0.16070670, 0.53002122]),
    ("Li", [0.16284190, 0.16028457, 0.13227571]),
    ("Li", [0.24604657, 0.06751107, 0.52198270]),
    ("Li", [0.00000000, 0.08802348, 0.00000000]),
    ("Li", [0.00000000, 0.16787564, 0.00000000]),
    ("Li", [0.25000000, 0.25000000, 0.09271138]),
    ("Li", [0.25000000, 0.25000000, 0.31073348]),
    ("Li", [0.00000000, 0.00000000, 0.50000000]),
    ("Ge", [0.02238262, 0.08274537, 0.36238377]),
    ("Ge", [0.19912892, 0.13015957, 0.79908975]),
    ("P", [0.00000000, 0.24930960, 0.50000000]),
    ("P", [0.00000000, 0.00000000, 0.00000000]),
    ("S", [0.06682419, 0.21917486, 0.11155168]),
    ("S", [0.08883362, 0.03420851, 0.09276978]),
    ("S", [0.09256237, 0.13066865, 0.27312907]),
    ("S", [0.11943484, 0.21715461, 0.43426785]),
    ("S", [0.13605750, 0.03661136, 0.39051965]),
    ("S", [0.14124072, 0.06383033, 0.67927882]),
    ("S", [0.16737794, 0.12977713, 0.98249694]),
    ("S", [0.19007382, 0.19181975, 0.70907338]),
    ("S", [0.00000000, 0.11974094, 0.50000000]),
]

# === 3. Apply symmetry operations and print results ===
for element, pos in atoms_data:
    all_sym_coords = apply_all_sym_ops(pos)
    unique_coords = unique_positions(all_sym_coords)

    print(f"\nElement: {element}, Original: {pos}")
    print("  All symmetry images:")
    for c in all_sym_coords:
        print(f"    {c[0]:.8f} {c[1]:.8f} {c[2]:.8f}")

    print("  Symmetry-inequivalent positions:")
    for c in unique_coords:
        print(f"    {c[0]:.8f} {c[1]:.8f}Â {c[2]:.8f}")