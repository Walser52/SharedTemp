# -*- coding: utf-8 -*-
"""single-atom.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C3Xuhwp7tqDXTVOq4O40TSXwsDXY7vXB
"""

from lxml import etree
from ase import Atoms
import numpy as np
import spglib

# === Step 1: Parse aiida.xml structure ===
xml_path = "aiida.xml"
tree = etree.parse(xml_path)
root = tree.getroot()

def tag_name(tag):
    return tag.split("}")[-1]

# Get last atomic_structure
structures = [el for el in root.iter() if tag_name(el.tag) == "atomic_structure"]
if not structures:
    raise ValueError("No <atomic_structure> tag found!")
structure = structures[-1]

# Cell vectors
cell = []
for tag in ["a1", "a2", "a3"]:
    el = next((e for e in structure.iter() if tag_name(e.tag) == tag), None)
    vec = list(map(float, el.text.strip().split()))
    cell.append(vec)

# Atoms
symbols = []
positions = []
for atom in structure.iter():
    if tag_name(atom.tag) == "atom":
        symbols.append(atom.attrib["name"])
        pos = list(map(float, atom.text.strip().split()))
        positions.append(pos)

atoms = Atoms(symbols=symbols, positions=positions, cell=cell, pbc=True)

# === Step 2: Get symmetry-inequivalent atoms and space group info ===
lattice = atoms.get_cell()
frac_coords = atoms.get_scaled_positions()
numbers = atoms.get_atomic_numbers()
structure_spglib = (lattice, frac_coords, numbers)

dataset = spglib.get_symmetry_dataset(structure_spglib, symprec=1e-5)
mapping = dataset["equivalent_atoms"]
spacegroup_number = dataset["number"]
spacegroup_symbol = dataset["international"]

print(f"\nDetected space group: {spacegroup_symbol} ({spacegroup_number})\n")

# Get unique atom indices
unique_indices = sorted(set(mapping))

# === Step 3: Print only symmetry-inequivalent Li atoms with Wyckoff and multiplicity ===
wyckoffs = dataset["wyckoffs"]
mapping = dataset["equivalent_atoms"]

print("Symmetry-inequivalent Li atoms (with Wyckoff position and multiplicity):\n")

for i in unique_indices:
    if symbols[i] != "Li":
        continue
    frac_pos = frac_coords[i]
    wyckoff = wyckoffs[i]
    multiplicity = list(mapping).count(i)  # Count how many atoms are equivalent to this one
    print(f"Li  {frac_pos[0]:.8f}  {frac_pos[1]:.8f}  {frac_pos[2]:.8f}   multiplicity: {multiplicity}, Wyckoff:Â {wyckoff}")

pip install ase spglib