# -*- coding: utf-8 -*-
"""ciflgps1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CvIznQSq4Iv68PP3TCHRuVx9DHKCRgFs
"""

import numpy as np
from ase.io import read
from ase.data import chemical_symbols
import spglib

from pymatgen.io.ase import AseAtomsAdaptor
from pymatgen.symmetry.analyzer import SpacegroupAnalyzer

# --- Load from QE output ---
vc_relax_path = "/home/naseeb/Desktop/DFT Books/LGPS/L21/4th(3rd in derive)relaxation/vc-relax.out"
atoms = read(vc_relax_path)

# --- Construct the cell tuple for spglib ---
cell = (atoms.cell.array, atoms.get_scaled_positions(), atoms.get_atomic_numbers())

# --- Get full symmetry dataset ---
sym_data = spglib.get_symmetry_dataset(cell, symprec=1e-5)

# Extract basic symmetry info
spacegroup_number = sym_data["number"]
spacegroup_symbol = sym_data["international"]
wyckoffs = sym_data["wyckoffs"]
equiv_atoms = sym_data["equivalent_atoms"]

# --- Map symmetry inequivalent atoms ---
unique_indices = sorted(set(equiv_atoms))

print(f"\n Space Group: {spacegroup_symbol} (No. {spacegroup_number})")
print(f"Total atoms in unit cell       : {len(atoms)}")
print(f"Symmetry-inequivalent atoms    : {len(unique_indices)}\n")

print("Element   Wyckoff  Multiplicity  Fractional Coordinates")
seen_wyckoffs = []
for i in unique_indices:
    wyck = wyckoffs[i]
    pos = atoms.get_scaled_positions()[i]
    z = atoms.get_atomic_numbers()[i]
    symbol = chemical_symbols[z]
    mult = wyckoffs.count(wyck)
    seen_wyckoffs.append(wyck)
    print(f"{symbol:<9} {wyck:<8} {mult:<6} ({pos[0]:.6f}, {pos[1]:.6f}, {pos[2]:.6f})")

# --- Convert to pymatgen structure ---
structure = AseAtomsAdaptor.get_structure(atoms)

# --- Analyze symmetry using pymatgen ---
analyzer = SpacegroupAnalyzer(structure, symprec=1e-5)
symm_struct = analyzer.get_symmetrized_structure()

# Print again using pymatgen's Wyckoff parsing
print("\n pymatgen-detected symmetry-inequivalent sites:")
for i, site_group in enumerate(symm_struct.equivalent_sites):
    site = site_group[0]
    wyckoff = symm_struct.wyckoff_symbols[i]
    symbol = site.specie.symbol
    coords = site.frac_coords
    mult = len(site_group)
    print(f"{symbol:<9} {wyckoff:<8} {mult:<6} ({coords[0]:.6f}, {coords[1]:.6f}, {coords[2]:.6f})")


# --- Write full CIF with symmetry + Wyckoff ---
from pymatgen.io.cif import CifWriter
writer = CifWriter(structure, symprec=1e-5)
writer.write_file("LGPS_standardized_with_wyckoff.cif")

print("\n CIF file written: LGPS_standardized_with_wyckoff.cif")